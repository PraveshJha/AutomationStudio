{"version":3,"sources":["components/Typography.js","components/Page.js","utils/colors.js","components/Widget/NumberWidget.js","components/Widget/IconWidget.js","pages/DashboardPage.js"],"names":["tagMap","h1","h2","h3","h4","h5","h6","p","lead","blockquote","Typography","Tag","tag","className","type","restProps","classes","classNames","TypoComp","defaultProps","bem","bn","create","Page","title","breadcrumbs","children","b","e","length","map","name","active","index","key","getColor","availableColor","window","getComputedStyle","document","documentElement","getPropertyValue","getThemeColors","NumberWidget","subtitle","number","color","progress","value","label","Card","body","CardText","CardTitle","IconWidget","bgColor","Icon","icon","iconProps","inverse","CardBody","size","CardSubtitle","APIBasePath","ENV","APIURL","ReportPublishPath","ReportURL","GetPieChart","summaryPass","summaryFail","datasets","data","backgroundColor","labels","GetDoughnutChart","GetListvalueFromJsonResponce","options","allitem","Object","keys","push","GetListKeyFromJsonResponce","GetLineChart","Component","borderColor","borderWidth","GetBarChart","fill","genLineDataforModuleFail","genTimeDuration","GetTotalTestScripts","PassCount","FailCount","output","Number","error","GetTotalExecutedComponents","summaryReports","totalResponseLength","GetExecutionTimeforBuild","ExeD","ExeTime","ExecutionResponse","exeKeysName","console","log","Options","option","Environment","DateOptions","i","TimeOptions","DashboardPage","React","constructor","props","super","this","state","items","summary","dashboardTotalDays","defaultEnv","EXECUTIONDATE","executionDateList","EXECUTIONHTMLTime","allModule","allModuleName","PassModulewise","allPassModuleWise","FailModulewise","allFailModuleWise","ConfigurationFile","CommonTestData","loader","ExecutionTimeXaxis","ExecutionTimeYAxis","Build1ExecutionDate","Build1ExecutionTime","Build2ExecutionDate","Build2ExecutionTime","build1ExecutionTimeList","build2ExecutionTimeList","buildLoader","Build1Summary","Build2Summary","Build1TotalExecutedScripts","Build2TotalExecutedScripts","Build1TotalExecutionTime","Build2TotalExecutionTime","Build1TotalComponentExecuted","Build2TotalComponentExecuted","ExecutionTimeList","Build1ExecutionData","Build2ExecutionData","BuildHeaderColumn","dataField","text","headerStyle","filter","textFilter","Build1SummarySection","Build2SummarySection","buildLoader2","a","fetch","homepage","json","homepageResponse","success","setState","Configuration","DefaultEnvironment","DashboardHistoryCount","request2","req2Response","request3","req3Response","DashboardTotalDayCount","request4","req4Response","request5","req5Response","ModuleName","request6","req6Response","RunTimeCheck","request7","req7Response","request8","req8Response","req8","req7","req6","req5","req4","req3","req2","GetLoaderData","scrollTo","updateENV","event","PreviousEnv","onchangeenvvalue","target","includes","Req1","Response1","Request1","Req2","Response2","Req3","Response3","Request3","Request2","OpenHTMLfileForLastResults","HtmlLastResultResultAPI","ORResponse","ORJson","toLowerCase","htmlfileName","servermessage","open","HTMLLastResult","OpenHTMLfilebasedonDateandTime","htmlenv","trim","executionDate","executionTime","Month","Dateformat","toString","split","OpenHTMLfileforBuild","OpenHTMLfileforBuild2","updateExecutionDate","updateBuild1ExecutionDate","updateBuild2ExecutionDate","graphPopulateBasedOnExecutionTime","API","Build1Graph","SummaryPass","SummaryFail","exeTime","ModuleDataSet","ModuleRowWiseData","allKeyValue","modulePassCount","moduleFailCount","moduleExecutionTime","Build2Graph","render","tpass","postdetails","totalpass","tFail","totalfail","test1","testData","finalItem","GetAllModule","test2","GetAllPass","test3","GetAllFail","BuildPagination","sizePerPage","hideSizePerPage","hidePageListOnlyOnePage","height","width","timeout","visible","lg","md","sm","xs","try","totaltestscripts","totalcomponents","totalcustomfunction","onClick","bind","lastresult","row","for","defaultValue","onChange","xl","scales","xAxes","scaleLabel","display","yAxes","stacked","ticks","beginAtZero","col","style","visibility","keyField","columns","striped","hover","condensed","pagination","paginationFactory","filterFactory"],"mappings":"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","file":"static/js/27.a615b62d.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport PropTypes from 'utils/propTypes';\n\nconst tagMap = {\n  h1: 'h1',\n  h2: 'h2',\n  h3: 'h3',\n  h4: 'h4',\n  h5: 'h5',\n  h6: 'h6',\n  'display-1': 'h1',\n  'display-2': 'h1',\n  'display-3': 'h1',\n  'display-4': 'h1',\n  p: 'p',\n  lead: 'p',\n  blockquote: 'blockquote',\n};\n\nconst types = Object.keys(tagMap);\n\nconst Typography = ({ tag: Tag, className, type, ...restProps }) => {\n  const classes = classNames({ [type]: !!type }, className);\n  let TypoComp;\n\n  if (Tag) {\n    TypoComp = Tag;\n  } else if (!Tag && tagMap[type]) {\n    TypoComp = tagMap[type];\n  } else {\n    TypoComp = 'p';\n  }\n\n  return <TypoComp {...restProps} className={classes} />;\n};\n\nTypography.propTypes = {\n  tag: PropTypes.component,\n  className: PropTypes.string,\n  type: PropTypes.oneOf(types),\n};\n\nTypography.defaultProps = {\n  type: 'p',\n};\n\nexport default Typography;\n","import React from 'react';\nimport PropTypes from 'utils/propTypes';\n\nimport bn from 'utils/bemnames';\n\nimport { Breadcrumb, BreadcrumbItem } from 'reactstrap';\n\nimport Typography from './Typography';\n\nconst bem = bn.create('page');\n\nconst Page = ({\n  title,\n  breadcrumbs,\n  tag: Tag,\n  className,\n  children,\n  ...restProps\n}) => {\n  const classes = bem.b('px-3', className);\n\n  return (\n    <Tag className={classes} {...restProps}>\n      <div className={bem.e('header')}>\n        {title && typeof title === 'string' ? (\n          <Typography type=\"h1\" className={bem.e('title')}>\n            {title}\n          </Typography>\n        ) : (\n            title\n          )}\n        {breadcrumbs && (\n          <Breadcrumb className={bem.e('breadcrumb')}>\n            <BreadcrumbItem>Home</BreadcrumbItem>\n            {breadcrumbs.length &&\n              breadcrumbs.map(({ name, active }, index) => (\n                <BreadcrumbItem key={index} active={active}>\n                  {name}\n                </BreadcrumbItem>\n              ))}\n          </Breadcrumb>\n        )}\n      </div>\n      {children}\n    </Tag>\n  );\n};\n\nPage.propTypes = {\n  tag: PropTypes.component,\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n  className: PropTypes.string,\n  children: PropTypes.node,\n  breadcrumbs: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      active: PropTypes.bool,\n    })\n  ),\n};\n\nPage.defaultProps = {\n  tag: 'div',\n  title: '',\n};\n\nexport default Page;\n","// const availableColors = [\n//   'blue',\n//   'indigo',\n//   'purple',\n//   'pink',\n//   'red',\n//   'orange',\n//   'yellow',\n//   'green',\n//   'teal',\n//   'cyan',\n//   'white',\n//   'gray',\n//   'gray-dark',\n//   'primary',\n//   'secondary',\n//   'success',\n//   'info',\n//   'warning',\n//   'danger',\n//   'light',\n//   'dark',\n// ];\n\nexport const getColor = (availableColor = 'primary') => {\n  if (typeof window === 'undefined') {\n    return null;\n  }\n\n  const color = window\n    .getComputedStyle(document.documentElement)\n    .getPropertyValue(`--${availableColor}`);\n\n  return color;\n};\n\nexport const getThemeColors = () => [\n  'primary',\n  'secondary',\n  'success',\n  'info',\n  'warning',\n  'danger',\n];\n","import React from 'react';\nimport PropTypes from 'utils/propTypes';\n\nimport { Card, CardText, CardTitle } from 'reactstrap';\nimport Typography from '../Typography';\n\nconst NumberWidget = ({\n  title,\n  subtitle,\n  number,\n  color,\n  progress: { value, label },\n  ...restProps\n}) => {\n  return (\n    <Card body {...restProps}>\n      <div className=\"d-flex justify-content-between\">\n        <CardText tag=\"div\">\n          <Typography className=\"mb-0\">\n            <strong>{title}</strong>\n          </Typography>\n          <Typography className=\"mb-0 text-muted small\">{subtitle}</Typography>\n        </CardText>\n        <CardTitle className={`text-${color}`}>{number}</CardTitle>\n      </div>\n    </Card>\n  );\n};\n\nNumberWidget.propTypes = {\n  title: PropTypes.string.isRequired,\n  subtitle: PropTypes.string,\n  number: PropTypes.oneOfType([\n    PropTypes.string.isRequired,\n    PropTypes.number.isRequired,\n  ]),\n  color: PropTypes.oneOf([\n    'primary',\n    'secondary',\n    'success',\n    'info',\n    'warning',\n    'danger',\n    'light',\n    'dark',\n  ]),\n  progress: PropTypes.shape({\n    value: PropTypes.number,\n    label: PropTypes.string,\n  }),\n};\n\nNumberWidget.defaultProps = {\n  title: '',\n  subtitle: '',\n  number: 0,\n  color: 'primary',\n  progress: {\n    value: 0,\n    label: '',\n  },\n};\n\nexport default NumberWidget;\n","import React from 'react';\nimport PropTypes from 'utils/propTypes';\n\nimport classNames from 'classnames';\n\nimport { Card, CardBody, CardTitle, CardSubtitle } from 'reactstrap';\n\nconst IconWidget = ({\n  bgColor,\n  icon: Icon,\n  iconProps,\n  title,\n  subtitle,\n  className,\n  ...restProps\n}) => {\n  const classes = classNames('cr-widget', className, {\n    [`bg-${bgColor}`]: bgColor,\n  });\n  return (\n    <Card inverse className={classes} {...restProps}>\n      <CardBody className=\"cr-widget__icon\">\n        <Icon size={50} {...iconProps} />\n      </CardBody>\n      <CardBody>\n        <CardTitle>{title}</CardTitle>\n        <CardSubtitle>{subtitle}</CardSubtitle>\n      </CardBody>\n    </Card>\n  );\n};\n\nIconWidget.propTypes = {\n  bgColor: PropTypes.string,\n  icon: PropTypes.component,\n  iconProps: PropTypes.object,\n  title: PropTypes.string,\n  subtitle: PropTypes.string,\n};\n\nIconWidget.defaultProps = {\n  bgColor: 'primary',\n  icon: 'span',\n  iconProps: { size: 50 },\n};\n\nexport default IconWidget;\n","import Page from 'components/Page';\nimport {NumberWidget } from 'components/Widget';\nimport {Pie } from 'react-chartjs-2';\nimport React from 'react';\nimport { Bar, Line ,Doughnut} from 'react-chartjs-2';\nimport {\n  Card,\n  CardBody,\n  CardHeader,\n  Col,\n  Row,\n} from 'reactstrap';\nimport {\n  Form,\n  FormGroup,\n  Input,\n  Label,\n} \nfrom 'reactstrap';\nimport Hidden from '@material-ui/core/Hidden';\nimport { getColor } from 'utils/colors';\nimport Loader from 'react-loader-spinner'\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\nimport paginationFactory from 'react-bootstrap-table2-paginator';\nimport filterFactory, { textFilter } from 'react-bootstrap-table2-filter';\n\nvar APIBasePath= window.ENV.APIURL;\nvar ReportPublishPath= window.ENV.ReportURL;\n//var APIBasePath ='http://localhost:49656/api/';\n//var ReportPublishPath ='http://192.168.1.42:8887/';\n\nfunction GetPieChart(summaryPass,summaryFail) {\n  return {\n    datasets: [\n      {\n        data: [summaryPass, summaryFail],\n        backgroundColor: [\n          getColor('success'),\n          getColor('danger'),\n        ],\n      },\n    ],\n    labels: ['PASS', 'FAIL'],\n  };\n}\n\nfunction GetDoughnutChart(summaryPass,summaryFail) {\n  return {\n    datasets: [\n      {\n        data: [summaryPass, summaryFail],\n        backgroundColor: [\n          getColor('primary'),\n          getColor('secondary'),\n        ],\n      },\n    ],\n    labels: ['PASS', 'FAIL'],\n  };\n}\n\nfunction GetListvalueFromJsonResponce(options) \n{\n  let allitem = []\n     Object.keys(options).map((key) => (\n      allitem.push(options[key])\n\t));\n\treturn allitem;\n}\n\nfunction GetListKeyFromJsonResponce(options) \n{\n  let allitem = []\n     Object.keys(options).map((key) => (\n      allitem.push(key)\n\t));\n\treturn allitem;\n}\n\nfunction GetLineChart(Component=[],summaryPass={},summaryFail={}) {\n  return {\n    labels: Component,\n    datasets: [\n      {\n        label: 'PASS',\n        backgroundColor: getColor('success'),\n        borderColor: getColor('success'),\n        borderWidth: 1,\n        data: [\n          ...summaryPass,\n        ],\n      },\n      {\n        label: 'FAIL',\n        backgroundColor: getColor('danger'),\n        borderColor: getColor('danger'),\n        borderWidth: 1,\n        data: [\n          ...summaryFail,\n        ],\n      },\n    ],\n  };\n}\n\nfunction GetBarChart(Component=[],summaryPass={},summaryFail={}) {\n  return {\n    labels: Component,\n    datasets: [\n      {\n        label: 'PASS',\n        backgroundColor: getColor('success'),\n        borderColor: getColor('success'),\n        borderWidth: 1,\n        type: 'bar',\n        fill: true,\n        data: [\n          ...summaryPass,\n        ],\n        \n      },\n      {\n        label: 'FAIL',\n        backgroundColor: getColor('danger'),\n        borderColor: getColor('danger'),\n        borderWidth: 1,\n        type: 'bar',\n        fill: true,\n        data: [\n          ...summaryFail,\n        ],\n      },\n    ],\n  };\n}\nfunction genLineDataforModuleFail(Component=[],summaryPass={},summaryFail={}){\n  return {\n    labels: Component,\n    datasets: [\n      {\n        label: 'PASS',\n        backgroundColor: getColor('success'),\n        borderColor: getColor('success'),\n        borderWidth: 1,\n        data: summaryPass,\n        fill: false\n      },\n      {\n        label: 'FAIL',\n        backgroundColor: getColor('danger'),\n        borderColor: getColor('danger'),\n        borderWidth: 1,\n        data: summaryFail,\n        fill: false\n      },\n    ],\n  };\n};\n\nfunction genTimeDuration(Component=[],summaryPass={}){\n  return {\n    labels: Component,\n    datasets: [\n      {\n        label: 'Execution Time in minutes',\n        backgroundColor: getColor('primary'),\n        borderColor: getColor('primary'),\n        borderWidth: 1,\n        data: summaryPass,\n        fill: false\n      }\n    ],\n  };\n};\n\n\n\nfunction GetTotalTestScripts(PassCount,FailCount)\n{\n   var output =0;\n   try\n   {\n    output=Number(PassCount)+Number(FailCount);\n   }\n   catch(error)\n   {}\n   return output;\n}\n\nfunction GetTotalExecutedComponents(summaryReports)\n{\n   var output =0;\n   try\n   {\n    var totalResponseLength = Object.keys(summaryReports).length;\n    output=Number(totalResponseLength)-Number(2);\n   }\n   catch(error)\n   {}\n   return output;\n}\n\nfunction GetExecutionTimeforBuild(ExeD,ExeTime,ExecutionResponse)\n{\n   var output ='0 Minutes';\n   try\n   {\n     var exeKeysName = ExeD+' | '+ExeTime;\n     console.log(exeKeysName);\n     output=ExecutionResponse[exeKeysName]+' Minutes'\n   }\n   catch(error)\n   {}\n   return output;\n}\n\nfunction Options({ options }) {\n    return (\n        options.map(option => \n                    <option >{option.Environment}</option>)\n                   );\n}\n\nfunction DateOptions({ options }) {\n  let allitem = []\n  for (let i = 0; i < options.length; i++) \n  {\n    allitem.push(options[i]);\n    \n  }\n  return (\n          allitem.map((i,index) => \n          <option >{allitem[index]}</option>)\n        );\n  \n}\nfunction TimeOptions({ options }) {\n  return (\n          Object.keys(options).map((key)  => \n          <option >{key}</option>)\n        );\n  \n}\nfunction GetAllModule(testData){\n  let allitem = []\n  let finalItem =[]\n     Object.keys(testData).map((key) => (\n      allitem.push(key)\n    ));\n\n    for (let i = 0; i < allitem.length-2; i++) \n    {\n      finalItem.push(allitem[i])\n    }\n  return (\n    finalItem\n  );\n}\n\nfunction GetAllPass(testData){\n  let allitem = []\n  let finalItem =[]\n     Object.keys(testData).map((key) => (\n      allitem.push(testData[key].split('|')[0])\n    ));\n    for (let i = 0; i < allitem.length-2; i++) \n    {\n      finalItem.push(allitem[i])\n    }\n  return (\n    finalItem\n  );\n}\n\nfunction GetAllFail(testData){\n  let allitem = []\n  let finalItem =[]\n     Object.keys(testData).map((key) => (\n      allitem.push(testData[key].split('|')[1])\n    ));\n    for (let i = 0; i < allitem.length-2; i++) \n    {\n      finalItem.push(allitem[i])\n    }\n  return (\n    finalItem\n  );\n}\n\nclass DashboardPage extends React.Component {\n  constructor(props){\n    super(props);\n    this.state={\n      items: [],\n      summary: [],\n      dashboardTotalDays:[],\n      defaultEnv:'',\n      ENV:'',\n      EXECUTIONDATE:'',\n      executionDateList:[],\n      EXECUTIONHTMLTime:'',\n      allModule :[],\n      allModuleName:[],\n      PassModulewise:[],\n      allPassModuleWise:[],\n      FailModulewise:[],\n      allFailModuleWise:[],\n      ConfigurationFile:[],\n      CommonTestData:[],\n      loader:true,\n      ExecutionTimeXaxis:[],\n      ExecutionTimeYAxis:[],\n      Build1ExecutionDate:'',\n      Build1ExecutionTime:'',\n      Build2ExecutionDate:'',\n      Build2ExecutionTime:'',\n      build1ExecutionTimeList:[],\n      build2ExecutionTimeList:[],\n      buildLoader:false,\n      Build1Summary:[],\n      Build2Summary:[],\n      Build1TotalExecutedScripts:0,\n      Build2TotalExecutedScripts:0,\n      Build1TotalExecutionTime:'00:00:00',\n      Build2TotalExecutionTime:'00:00:00',\n      Build1TotalComponentExecuted:0,\n      Build2TotalComponentExecuted:0,\n      ExecutionTimeList:[],\n      Build1ExecutionData:[],\n      Build2ExecutionData:[],\n      BuildHeaderColumn :[{dataField: 'id',text: '#',headerStyle: {backgroundColor: '#aa66cc'}},{dataField: 'module',text: 'Module',filter: textFilter(),headerStyle: {backgroundColor: '#aa66cc'}},{dataField: 'pass',text: 'PASS',headerStyle: {backgroundColor: '#aa66cc'}},{dataField: 'fail',text: 'Fail',headerStyle: {backgroundColor: '#aa66cc'}},{dataField: 'buildmoduleexetime',text: 'Execution Time',headerStyle: {backgroundColor: '#aa66cc'}}],\n      Build1SummarySection:false,\n      Build2SummarySection:false,\n      buildLoader2:false,\n\n    }\n    const GetLoaderData = async () => \n    {\n      const homepage = await fetch(APIBasePath+'dashboard');\n      const homepageResponse = await homepage.json();\n      if(homepageResponse.success)\n      {\n          this.setState({ConfigurationFile:homepageResponse.Configuration});\n          this.setState({CommonTestData:homepageResponse.CommonTestData});\n          this.setState({defaultEnv:this.state.ConfigurationFile.DefaultEnvironment})\n          this.setState({ENV:this.state.ConfigurationFile.DefaultEnvironment})\n          console.log(homepageResponse.Configuration.DashboardHistoryCount)\n          this.setState({EXECUTIONDATE:'Last '+homepageResponse.Configuration.DashboardHistoryCount+' Execution Results'})\n          // Request 2\n        const req2 = async () => \n        {\n          const request2 = await fetch(APIBasePath+'as')\n          const req2Response = await request2.json();\n          this.setState({items:req2Response})\n          // Request 3\n          const req3 = async () => \n          {\n            const request3 = await fetch(APIBasePath+'summary?env='+this.state.ConfigurationFile.DefaultEnvironment+'&edate=Last '+this.state.ConfigurationFile.DashboardHistoryCount+' Execution Results')\n            const req3Response = await request3.json();\n            this.setState({summary:req3Response})\n            // Request 4\n            const req4 = async () => \n            {\n              const request4 = await fetch(APIBasePath+'summary?dashboardtotaldays='+this.state.ConfigurationFile.DashboardTotalDayCount)\n              const req4Response = await request4.json();\n              this.setState({dashboardTotalDays:GetListvalueFromJsonResponce(req4Response)})\n              // Request 5\n              const req5 = async () => \n              {\n                const request5 = await fetch(APIBasePath+'testcase?moduleName=')\n                const req5Response = await request5.json();\n                this.setState({allModuleName:req5Response})\n                var ModuleName = GetListvalueFromJsonResponce(this.state.allModuleName)\n                this.setState({allModule:ModuleName});\n                 // Request 6\n                const req6 = async () => \n                {\n                  const request6 = await fetch(APIBasePath+'dashboard?env='+this.state.ENV+'&histortyCount='+this.state.ConfigurationFile.DashboardHistoryCount+'&id=0')\n                  const req6Response = await request6.json();\n                  this.setState({PassModulewise:req6Response})\n                  var RunTimeCheck = GetListvalueFromJsonResponce(this.state.PassModulewise)\n                  this.setState({allPassModuleWise:RunTimeCheck});\n                   // Request 7\n                  const req7 = async () => \n                  {\n                    const request7 = await fetch(APIBasePath+'dashboard?env='+this.state.ENV+'&histortyCount='+this.state.ConfigurationFile.DashboardHistoryCount+'&id=1')\n                    const req7Response = await request7.json();\n                    this.setState({FailModulewise:req7Response})\n                    var RunTimeCheck = GetListvalueFromJsonResponce(this.state.FailModulewise)\n                    this.setState({allFailModuleWise:RunTimeCheck});\n                    const req8 = async () => \n                    {\n                      const request8 = await fetch(APIBasePath+'dashboard?env='+this.state.ENV+'&histortyCount='+this.state.ConfigurationFile.DashboardHistoryCount)\n                      const req8Response = await request8.json();\n                      this.setState({ExecutionTimeList:req8Response})\n                      this.setState({ExecutionTimeXaxis:GetListKeyFromJsonResponce(req8Response)});\n                      this.setState({ExecutionTimeYAxis:GetListvalueFromJsonResponce(req8Response)});\n                      this.setState({loader:false})\n                    }\n                    req8();\n                  }\n                  req7();\n                }\n                req6();\n              }\n              req5();\n            }\n            req4();\n          }\n          req3();\n        }\n        req2();\n      }\n    }\n    GetLoaderData();\n    \n   // this is needed, because InfiniteCalendar forces window scroll\n     window.scrollTo(0, 0);\n  }\n  \n  updateENV(event)\n  {\n    var PreviousEnv = this.state.ENV;\n    var onchangeenvvalue = event.target.value;\n    this.setState({ENV : onchangeenvvalue})\n    if(PreviousEnv ===onchangeenvvalue)\n    {\n      return;\n    }\n    if(this.state.EXECUTIONDATE.includes('Execution Results'))\n    {\n      this.setState({executionDateList : ''})\n      this.setState({loader:true})\n      const Request1 = async () => \n      {\n        const Req1 = await fetch(APIBasePath+'summary?env='+onchangeenvvalue+'&edate=Last '+this.state.ConfigurationFile.DashboardHistoryCount+' Execution Results')\n        const Response1 = await Req1.json();\n        this.setState({summary:Response1})\n        this.setState({loader:false})\n      }\n      Request1();\n      \n    }\n    else\n    {\n      this.setState({loader:true})\n      const Request1 = async () => \n      {\n        const Req1 = await fetch(APIBasePath+'summary?env='+onchangeenvvalue+'&executiondate='+this.state.EXECUTIONDATE)\n        const Response1 = await Req1.json();\n        this.setState({executionDateList:Response1})\n        this.setState({loader:false})\n      }\n      Request1();\n\n    }\n    if(PreviousEnv !==onchangeenvvalue)\n    {\n      this.setState({loader:true})\n      const Request1 = async () => \n      {\n        const Req1 = await fetch(APIBasePath+'dashboard?env='+onchangeenvvalue+'&histortyCount='+this.state.ConfigurationFile.DashboardHistoryCount+'&id=0')\n        const Response1 = await Req1.json();\n        this.setState({PassModulewise:Response1})\n        var RunTimeCheck = GetListvalueFromJsonResponce(this.state.PassModulewise)\n        this.setState({allPassModuleWise:RunTimeCheck});\n        const Request2 = async () => \n        {\n          const Req2 = await fetch(APIBasePath+'dashboard?env='+onchangeenvvalue+'&histortyCount='+this.state.ConfigurationFile.DashboardHistoryCount+'&id=1')\n          const Response2 = await Req2.json();\n          this.setState({FailModulewise:Response2})\n          var RunTimeCheck = GetListvalueFromJsonResponce(this.state.FailModulewise)\n          this.setState({allFailModuleWise:RunTimeCheck});\n          const Request3 = async () => \n          {\n            const Req3 = await fetch(APIBasePath+'testcase?moduleName=')\n            const Response3 = await Req3.json();\n            this.setState({allModuleName:Response3})\n            var ModuleName = GetListvalueFromJsonResponce(this.state.allModuleName)\n            this.setState({allModule:ModuleName});\n            const req8 = async () => \n            {\n              const request8 = await fetch(APIBasePath+'dashboard?env='+this.state.ENV+'&histortyCount='+this.state.ConfigurationFile.DashboardHistoryCount)\n              const req8Response = await request8.json();\n              this.setState({ExecutionTimeList:req8Response})\n              this.setState({ExecutionTimeXaxis:GetListKeyFromJsonResponce(req8Response)});\n              this.setState({ExecutionTimeYAxis:GetListvalueFromJsonResponce(req8Response)});\n              this.setState({loader:false})\n            }\n            req8();\n          }\n          Request3();\n        }\n        Request2();\n      }\n      Request1();\n    }\n\n  }\n\n    OpenHTMLfileForLastResults()\n    {\n      var HtmlLastResultResultAPI = APIBasePath+'report?id=0'\n      //var HtmlLastResultResultAPI = 'http://localhost:49656/api/report?id=0'\n      const HTMLLastResult = async () => \n      {\n        const ORResponse = await fetch(HtmlLastResultResultAPI);\n        const ORJson = await ORResponse.json();\n        if(ORJson.success.toLowerCase()==='true')\n        {\n          var htmlfileName= ORJson.servermessage;\n          window.open(ReportPublishPath+'TestSuiteSummaryfile/'+htmlfileName);\n        }\n        \n      }\n      HTMLLastResult();\n      \n    }\n\n    OpenHTMLfilebasedonDateandTime()\n    {\n        var htmlenv = this.state.ENV;\n        if(htmlenv.trim()===\"\")\n        {\n          return;\n        }\n        var executionDate =this.state.EXECUTIONDATE;\n        if(executionDate.trim()==='Last '+this.state.ConfigurationFile.DashboardHistoryCount+' Execution Results')\n        {\n          return;;\n        }\n        if(executionDate.trim()===\"\")\n        {\n          return;\n        }\n        var executionTime =this.state.EXECUTIONHTMLTime;\n        if(executionTime.trim()===\"\")\n        {\n          return;\n        }\n        var Month =''\n        var Dateformat = executionDate.toString().split(' ');\n        switch(Dateformat[1])\n        {\n            case\"Jan\":\n            Month=\"01\";\n            break;\n            case\"Feb\":\n            Month=\"02\";\n            break;\n            case\"Mar\":\n            Month=\"03\";\n            break;\n            case\"Apr\":\n            Month=\"04\";\n            break;\n            case\"May\":\n            Month=\"05\";\n            break;\n            case\"Jun\":\n            Month=\"06\";\n            break;\n            case\"Jul\":\n            Month=\"07\";\n            break;\n            case\"Aug\":\n            Month=\"08\";\n            break;\n            case\"Sep\":\n            Month=\"09\";\n            break;\n            case\"Oct\":\n            Month=\"10\";\n            break;\n            case\"Nov\":\n            Month=\"11\";\n            break;\n            case\"Dec\":\n            Month=\"12\";\n            break;\n            default:\n              break;\n\n        }\n        var Monthformated=Month+'-'+Dateformat[0]+'-'+Dateformat[2];\n        var htmlfileName='TestSummary_'+htmlenv+'_'+Monthformated+'_'+executionTime+'.html'\n        window.open(ReportPublishPath+'TestSuiteSummaryfile/'+htmlenv+'/'+htmlfileName);\n    }\n\n    OpenHTMLfileforBuild()\n    {\n      var htmlenv= this.state.ENV;\n      var executionDate= this.state.Build1ExecutionDate;\n      var executionTime= this.state.Build1ExecutionTime;\n        if(htmlenv.trim()===\"\")\n        {\n          return;\n        }\n        if(executionDate.trim()===\"\")\n        {\n          return;\n        }\n        if(executionTime.trim()===\"\")\n        {\n          return;\n        }\n        var Month =''\n        var Dateformat = executionDate.toString().split(' ');\n        switch(Dateformat[1])\n        {\n            case\"Jan\":\n            Month=\"01\";\n            break;\n            case\"Feb\":\n            Month=\"02\";\n            break;\n            case\"Mar\":\n            Month=\"03\";\n            break;\n            case\"Apr\":\n            Month=\"04\";\n            break;\n            case\"May\":\n            Month=\"05\";\n            break;\n            case\"Jun\":\n            Month=\"06\";\n            break;\n            case\"Jul\":\n            Month=\"07\";\n            break;\n            case\"Aug\":\n            Month=\"08\";\n            break;\n            case\"Sep\":\n            Month=\"09\";\n            break;\n            case\"Oct\":\n            Month=\"10\";\n            break;\n            case\"Nov\":\n            Month=\"11\";\n            break;\n            case\"Dec\":\n            Month=\"12\";\n            break;\n            default:\n              break;\n\n        }\n        var Monthformated=Month+'-'+Dateformat[0]+'-'+Dateformat[2];\n        var htmlfileName='TestSummary_'+htmlenv+'_'+Monthformated+'_'+executionTime+'.html'\n        window.open(ReportPublishPath+'TestSuiteSummaryfile/'+htmlenv+'/'+htmlfileName);\n    }\n\n    OpenHTMLfileforBuild2()\n    {\n      var htmlenv= this.state.ENV;\n      var executionDate= this.state.Build2ExecutionDate;\n      var executionTime= this.state.Build2ExecutionTime;\n        if(htmlenv.trim()===\"\")\n        {\n          return;\n        }\n        if(executionDate.trim()===\"\")\n        {\n          return;\n        }\n        if(executionTime.trim()===\"\")\n        {\n          return;\n        }\n        var Month =''\n        var Dateformat = executionDate.toString().split(' ');\n        switch(Dateformat[1])\n        {\n            case\"Jan\":\n            Month=\"01\";\n            break;\n            case\"Feb\":\n            Month=\"02\";\n            break;\n            case\"Mar\":\n            Month=\"03\";\n            break;\n            case\"Apr\":\n            Month=\"04\";\n            break;\n            case\"May\":\n            Month=\"05\";\n            break;\n            case\"Jun\":\n            Month=\"06\";\n            break;\n            case\"Jul\":\n            Month=\"07\";\n            break;\n            case\"Aug\":\n            Month=\"08\";\n            break;\n            case\"Sep\":\n            Month=\"09\";\n            break;\n            case\"Oct\":\n            Month=\"10\";\n            break;\n            case\"Nov\":\n            Month=\"11\";\n            break;\n            case\"Dec\":\n            Month=\"12\";\n            break;\n            default:\n              break;\n\n        }\n        var Monthformated=Month+'-'+Dateformat[0]+'-'+Dateformat[2];\n        var htmlfileName='TestSummary_'+htmlenv+'_'+Monthformated+'_'+executionTime+'.html'\n        window.open(ReportPublishPath+'TestSuiteSummaryfile/'+htmlenv+'/'+htmlfileName);\n    }\n    updateExecutionDate(event)\n    {\n      var executionDate = event.target.value;\n      this.setState({EXECUTIONDATE : event.target.value})\n      if(executionDate.includes('Execution Results'))\n      {\n        this.setState({executionDateList : ''})\n        this.setState({loader:true})\n        const Request1 = async () => \n        {\n          const Req1 = await fetch(APIBasePath+'summary?env='+this.state.ENV+'&edate=Last '+this.state.ConfigurationFile.DashboardHistoryCount+' Execution Results')\n          const Response1 = await Req1.json();\n          this.setState({summary:Response1})\n          this.setState({loader:false})\n        }\n        Request1();\n      }\n      else\n      {\n        this.setState({loader:true})\n        const Request1 = async () => \n        {\n          const Req1 = await fetch(APIBasePath+'summary?env='+this.state.ENV+'&executiondate='+executionDate)\n          const Response1 = await Req1.json();\n          this.setState({executionDateList:Response1})\n          this.setState({loader:false})\n        }\n        Request1();\n      \n      }\n    }\n    updateBuild1ExecutionDate(event)\n    {\n      var executionDate = event.target.value;\n      if(executionDate===this.state.Build1ExecutionDate)\n      {\n        return;\n      }\n      this.setState({Build1ExecutionTime:''})\n      this.setState({Build1ExecutionDate : event.target.value})\n      this.setState({buildLoader:true})\n      const Request1 = async () => \n      {\n        const Req1 = await fetch(APIBasePath+'summary?env='+this.state.ENV+'&executiondate='+executionDate)\n        const Response1 = await Req1.json();\n        this.setState({build1ExecutionTimeList:Response1})\n        this.setState({buildLoader:false})\n      }\n      Request1();\n    }\n    updateBuild2ExecutionDate(event)\n    {\n      var executionDate = event.target.value;\n      if(executionDate===this.state.Build2ExecutionDate)\n      {\n        return;\n      }\n      this.setState({Build2ExecutionTime:''})\n      this.setState({Build2ExecutionDate : event.target.value})\n      this.setState({buildLoader2:true})\n      const Request1 = async () => \n      {\n        const Req1 = await fetch(APIBasePath+'summary?env='+this.state.ENV+'&executiondate='+executionDate)\n        const Response1 = await Req1.json();\n        this.setState({build2ExecutionTimeList:Response1})\n        this.setState({buildLoader2:false})\n      }\n      Request1();\n    }\n    graphPopulateBasedOnExecutionTime(event)\n    {\n      var executionTime = event.target.value;\n      this.setState({EXECUTIONHTMLTime:executionTime});\n      var API = APIBasePath+'summary?env='+this.state.ENV+'&edate='+this.state.EXECUTIONDATE+'&etime='+executionTime;\n      this.setState({loader:true})\n      const Request1 = async () => \n      {\n        const Req1 = await fetch(API)\n        const Response1 = await Req1.json();\n        this.setState({summary:Response1})\n        this.setState({loader:false})\n      }\n      Request1();\n    }\n    Build1Graph(event)\n    {\n      var executionTime = event.target.value;\n      if(executionTime===this.state.Build1ExecutionTime)\n      {\n        return;\n      }\n      this.setState({Build1ExecutionTime:executionTime});\n      var API = APIBasePath+'summary?env='+this.state.ENV+'&edate='+this.state.Build1ExecutionDate+'&etime='+executionTime;\n      this.setState({buildLoader:true})\n      const Request1 = async () => \n      {\n        const Req1 = await fetch(API)\n        const Response1 = await Req1.json();\n        this.setState({Build1Summary:Response1})\n        this.setState({Build1TotalExecutedScripts:GetTotalTestScripts(Response1.SummaryPass,Response1.SummaryFail)})\n        this.setState({Build1TotalComponentExecuted:GetTotalExecutedComponents(Response1)})\n        var exeTime= GetExecutionTimeforBuild(this.state.Build1ExecutionDate,this.state.Build1ExecutionTime,this.state.ExecutionTimeList);\n        this.setState({Build1TotalExecutionTime:exeTime})\n        this.setState({Build1SummarySection:true})\n        //@ add datatable\n        let allModule = Object.keys(Response1);\n        var ModuleDataSet=[]\n        for(let i=0;i<allModule.length;i++)\n        {\n           var ModuleRowWiseData={}\n            var ModuleName = allModule[i];\n            if(ModuleName==='SummaryPass' || ModuleName==='SummaryFail')\n            {\n\n            }\n            else\n            {\n              try\n              {\n                var allKeyValue= Response1[ModuleName];\n                var modulePassCount= allKeyValue.split('|')[0];\n                var moduleFailCount= allKeyValue.split('|')[1];\n                var moduleExecutionTime= allKeyValue.split('|')[2];\n                ModuleRowWiseData['id']=i+1\n                ModuleRowWiseData['module']=ModuleName;\n                ModuleRowWiseData['pass']=modulePassCount;\n                ModuleRowWiseData['fail']=moduleFailCount;\n                ModuleRowWiseData['buildmoduleexetime']=moduleExecutionTime+' Minutes';\n                ModuleDataSet.push(ModuleRowWiseData);\n                \n              }\n              catch(error)\n              {}\n            }\n        }\n        this.setState({Build1ExecutionData:ModuleDataSet})\n        this.setState({buildLoader:false})\n        \n      }\n      Request1();\n    }\n\n    Build2Graph(event)\n    {\n      var executionTime = event.target.value;\n      if(executionTime===this.state.Build2ExecutionTime)\n      {\n        return;\n      }\n      this.setState({Build2ExecutionTime:executionTime});\n      var API = APIBasePath+'summary?env='+this.state.ENV+'&edate='+this.state.Build2ExecutionDate+'&etime='+executionTime;\n      this.setState({buildLoader2:true})\n      const Request1 = async () => \n      {\n        const Req1 = await fetch(API)\n        const Response1 = await Req1.json();\n        this.setState({Build2Summary:Response1})\n        this.setState({Build2TotalExecutedScripts:GetTotalTestScripts(Response1.SummaryPass,Response1.SummaryFail)})\n        this.setState({Build2TotalComponentExecuted:GetTotalExecutedComponents(Response1)})\n        var exeTime= GetExecutionTimeforBuild(this.state.Build2ExecutionDate,this.state.Build2ExecutionTime,this.state.ExecutionTimeList);\n        this.setState({Build2TotalExecutionTime:exeTime})\n        this.setState({Build2SummarySection:true})\n        //@ add datatable\n        let allModule = Object.keys(Response1);\n        var ModuleDataSet=[]\n        for(let i=0;i<allModule.length;i++)\n        {\n           var ModuleRowWiseData={}\n            var ModuleName = allModule[i];\n            if(ModuleName==='SummaryPass' || ModuleName==='SummaryFail')\n            {\n\n            }\n            else\n            {\n              try\n              {\n                var allKeyValue= Response1[ModuleName];\n                var modulePassCount= allKeyValue.split('|')[0];\n                var moduleFailCount= allKeyValue.split('|')[1];\n                var moduleExecutionTime= allKeyValue.split('|')[2];\n                ModuleRowWiseData['id']=i+1\n                ModuleRowWiseData['module']=ModuleName;\n                ModuleRowWiseData['pass']=modulePassCount;\n                ModuleRowWiseData['fail']=moduleFailCount;\n                ModuleRowWiseData['buildmoduleexetime']=moduleExecutionTime+' Minutes';\n                ModuleDataSet.push(ModuleRowWiseData);\n                \n              }\n              catch(error)\n              {}\n            }\n        }\n        this.setState({Build2ExecutionData:ModuleDataSet})\n        this.setState({buildLoader2:false})\n        \n      }\n      Request1();\n    }\n  render() {\n    \n    var {items,summary,defaultEnv,executionDateList} = this.state;\n    var tpass=0;\n    try{\n     tpass=items.map((postdetails,index)=> {\n                return postdetails.totalpass\n               })\n              }catch(error)\n              {}\n      var tFail=0;\n      try{\n     tFail=items.map((postdetails,index)=> {\n    return postdetails.totalfail\n    })}\n    catch(error)\n    {}\n    var summaryPass = summary.SummaryPass;\n    var summaryFail = summary.SummaryFail;\n    var test1 = GetAllModule(summary);\n    var test2 =GetAllPass(summary);\n    var test3 =GetAllFail(summary);\n\n      const BuildPagination = {\n        sizePerPage: 5,\n        hideSizePerPage: true,\n        hidePageListOnlyOnePage: true\n        };\n    return (\n      <Page\n        className=\"DashboardPage\"\n        title=\"Dashboard\"\n        breadcrumbs={[{ name: 'Dashboard', active: true }]}\n      >\n         <Loader \n         type=\"ThreeDots\"\n         color=\"#00BFFF\"\n         height={50}\n         width={100}\n         timeout={120000} //3 secs\n         visible = {this.state.loader}\n        />\n        <Row>\n\t\t       <Col lg={3} md={6} sm={6} xs={12}>\n            <NumberWidget\n              title=\"Total Test Sctipts\"\n              try\n              number={items.map((postdetails,index)=> {\n                return postdetails.totaltestscripts\n               })}\n              color=\"secondary\"\n            />\n            </Col>\n          <Col lg={3} md={6} sm={6} xs={12}>\n            <NumberWidget\n              title=\"Total Components\"\n              number={items.map((postdetails,index)=> {\n                return postdetails.totalcomponents\n               })}\n              color=\"secondary\"\n            />\n          </Col>\n\n          <Col lg={3} md={6} sm={6} xs={12}>\n            <NumberWidget\n              title=\"Total Custom Function\"\n              number={items.map((postdetails,index)=> {\n                return postdetails.totalcustomfunction\n               })}\n              color=\"secondary\"\n            />\n          </Col>\n\n          <Col lg={3} md={6} sm={6} xs={12}>\n            < NumberWidget onClick={this.OpenHTMLfileForLastResults.bind(this)}\n              title=\"Last Results\"\n              subtitle={\"PASS: \" + tpass+ \" FAIL: \"+tFail}\n                number=  {items.map((postdetails,index)=> {\n                return postdetails.lastresult\n               })}\n              color=\"secondary\"\n              />\n          </Col>\n        </Row>\n      <Row>\n        <Col lg={6} md={6} sm={6} xs={12}>\n          <Card>\n            <CardHeader>Selection Citieria</CardHeader>\n            <CardBody>\n              <Form>\n                <FormGroup row>\n                  <Label for=\"exampleSelect\" sm={4}>\n                   Environment*\n                  </Label>\n                  <Col>\n                    <Input type=\"select\" name=\"env\" defaultValue = {defaultEnv} value={this.state.text} onChange={this.updateENV.bind(this)}>\n\t\t\t\t\t          <Options options={this.state.CommonTestData} />\n\t\t\t\t\t          </Input>\n                  </Col>\n                </FormGroup>\n\t\t\t\t<FormGroup row>\n                  <Label for=\"exampleSelect\" sm={4}>\n                    Execution Summary*\n                  </Label>\n                  <Col >\n                    <Input type=\"select\" name=\"executionsummary\" value={this.state.text} onChange={this.updateExecutionDate.bind(this)}>\n\t\t\t\t\t          <option>Last {this.state.ConfigurationFile.DashboardHistoryCount} Execution Results</option>\n                    <DateOptions options={this.state.dashboardTotalDays} />\n\t\t\t\t\t          </Input>\n                  </Col>\n                </FormGroup>\n\t\t\t\t<FormGroup row>\n                  <Label for=\"exampleSelect\" sm={4}>\n                    Execution Time\n                  </Label>\n                  <Col >\n                    <Input type=\"select\" name=\"executiontime\" defaultValue = \"\" value={this.state.text} onChange={this.graphPopulateBasedOnExecutionTime.bind(this)}>\n                    <option></option>\n                    <TimeOptions options={executionDateList} />\n                    </Input>\n                  </Col>\n                </FormGroup>\n              </Form>\n            </CardBody>\n          </Card>\n        </Col>\n\t\t <Col xl={6} >\n          <Card>\n            <CardHeader>Total Pass Fail Count</CardHeader>\n            <CardBody>\n\t\t\t  <Col onClick={this.OpenHTMLfilebasedonDateandTime.bind(this)}>\n              <Pie  data={GetPieChart(summaryPass,summaryFail)} />\n\t\t\t  </Col>\n            </CardBody>\n          </Card>\n        </Col>\n      </Row>\n        <Row>\n        <Col lg={12} md={6} sm={6} xs={12}>\n          <Card>\n            <CardHeader>\n                Execution Status \n                <small> Last {this.state.ConfigurationFile.DashboardHistoryCount} Results</small>\n              </CardHeader>\n            <CardBody>\n              <Line\n                data={GetLineChart(test1,test2,test3)}\n                options={{\n                  scales: {\n                    xAxes: [\n                      {\n                        scaleLabel: {\n                          display: true,\n                        },\n                      },\n                    ],\n                    yAxes: [\n                      {\n                        stacked: true,\n                        scaleLabel: {\n                          display: true,\n                        },\n                      },\n                    ],\n                  },\n                }}\n              />\n            </CardBody>\n          </Card>\n        </Col>\n        <Col lg={12} md={6} sm={6} xs={12}>\n          <Card>\n            <CardHeader>Execution Summary\n            <small> Last {this.state.ConfigurationFile.DashboardHistoryCount} Results</small>\n            </CardHeader>\n            <CardBody>\n              <Bar data={GetBarChart(test1,test2,test3)} \n              options={{\n                scales: {\n                  yAxes: [{\n                    ticks: {\n                      beginAtZero: true\n                    }\n                  }]\n                },\n              }}\n              />\n            </CardBody>\n          </Card>\n        </Col>\n        <Col lg={12} md={6} sm={6} xs={12}>\n          <Card>\n            <CardHeader>Module Pass/Fail Graph\n            <small> Last {this.state.ConfigurationFile.DashboardHistoryCount} Results</small>\n            </CardHeader>\n            <CardBody>\n            <Line data={genLineDataforModuleFail(this.state.allModule,this.state.allPassModuleWise,this.state.allFailModuleWise)} />\n            </CardBody>\n          </Card>\n        </Col>\n        <Col lg={12} md={6} sm={6} xs={12}>\n          <Card>\n            <CardHeader>Execution Time in Minutes\n            <small> Last {this.state.ConfigurationFile.DashboardHistoryCount} Results</small>\n            </CardHeader>\n            <CardBody>\n            <Line data={genTimeDuration(this.state.ExecutionTimeXaxis,this.state.ExecutionTimeYAxis)} />\n            </CardBody>\n          </Card>\n        </Col>\n        </Row>\n        <Row>\n        <Col xs={6}>\n          <Card>\n            <CardHeader>Build Comparison (Build 1)\n            <Loader \n              type=\"ThreeDots\"\n              color=\"#00BFFF\"\n              height={50}\n              width={100}\n              timeout={120000} //3 secs\n              visible = {this.state.buildLoader}\n              />\n            </CardHeader>\n            <CardBody>\n              <Form>\n\t\t\t\t        <FormGroup row>\n                  <Label for=\"exampleSelect\" sm={4}>\n                    Execution Summary*\n                  </Label>\n                  <Col >\n                    <Input type=\"select\" name=\"executionsummary\" value={this.state.Build1ExecutionDate} onChange={this.updateBuild1ExecutionDate.bind(this)}>\n                    <option></option>\n                    <DateOptions options={this.state.dashboardTotalDays} />\n\t\t\t\t\t          </Input>\n                  </Col>\n                </FormGroup>\n\t\t\t\t        <FormGroup row>\n                  <Label for=\"exampleSelect\" sm={4}>\n                    Execution Time\n                  </Label>\n                  <Col >\n                    <Input type=\"select\" name=\"executiontime\" value={this.state.Build1ExecutionTime} onChange={this.Build1Graph.bind(this)}>\n                    <option></option>\n                    <TimeOptions options={this.state.build1ExecutionTimeList} />\n                    </Input>\n                  </Col>\n                </FormGroup>\n                <FormGroup col style={{visibility: this.state.Build1SummarySection ? 'visible' : 'hidden' }} >\n                  <Col onClick={this.OpenHTMLfileforBuild.bind(this)}>\n                      <Doughnut  data={GetDoughnutChart(this.state.Build1Summary.SummaryPass,this.state.Build1Summary.SummaryFail)} />\n                  </Col>\n                  <NumberWidget\n                    title=\"Total Executed Test Scripts\"\n                    number={this.state.Build1TotalExecutedScripts}\n                  />\n                  <NumberWidget\n                    title=\"Total Execution Time\"\n                    number={this.state.Build1TotalExecutionTime}\n                  />\n                  <NumberWidget\n                    title=\"Total Executed Components\"\n                    number={this.state.Build1TotalComponentExecuted}\n                  />\n                </FormGroup>\n                <FormGroup col style={{visibility: this.state.Build1SummarySection ? 'visible' : 'hidden' }}>\n                  <BootstrapTable \n                  keyField=\"id\"\n                  data={ this.state.Build1ExecutionData }\n                  columns={ this.state.BuildHeaderColumn }\n                  striped\n                  hover\n                  condensed\n                  pagination={ paginationFactory(BuildPagination) }\n                  filter={ filterFactory() }\n                />\n                </FormGroup>\n              </Form>\n            </CardBody>\n          </Card>\n        </Col>\n        <Col lg={6} md={6} sm={6} xs={12}>\n          <Card>\n            <CardHeader>Build Comparison (Build 2)\n            <Loader \n              type=\"ThreeDots\"\n              color=\"#00BFFF\"\n              height={50}\n              width={100}\n              timeout={120000} //3 secs\n              visible = {this.state.buildLoader2}\n              />\n            </CardHeader>\n            <CardBody>\n              <Form>\n\t\t\t\t        <FormGroup row>\n                  <Label for=\"exampleSelect\" sm={4}>\n                    Execution Summary*\n                  </Label>\n                  <Col >\n                    <Input type=\"select\" name=\"executionsummary2\" value={this.state.Build2ExecutionDate} onChange={this.updateBuild2ExecutionDate.bind(this)}>\n                    <option></option>\n                    <DateOptions options={this.state.dashboardTotalDays} />\n\t\t\t\t\t          </Input>\n                  </Col>\n                </FormGroup>\n\t\t\t\t        <FormGroup row>\n                  <Label for=\"exampleSelect\" sm={4}>\n                    Execution Time\n                  </Label>\n                  <Col >\n                    <Input type=\"select\" name=\"executiontime2\" value={this.state.Build2ExecutionTime} onChange={this.Build2Graph.bind(this)}>\n                    <option></option>\n                    <TimeOptions options={this.state.build2ExecutionTimeList} />\n                    </Input>\n                  </Col>\n                </FormGroup>\n                <FormGroup col style={{visibility: this.state.Build2SummarySection ? 'visible' : 'hidden' }}>\n                  <Col onClick={this.OpenHTMLfileforBuild2.bind(this)}>\n                      <Doughnut  data={GetDoughnutChart(this.state.Build2Summary.SummaryPass,this.state.Build2Summary.SummaryFail)} />\n                  </Col>\n                  <NumberWidget\n                    title=\"Total Executed Test Scripts\"\n                    number={this.state.Build2TotalExecutedScripts}\n                  />\n                  <NumberWidget\n                    title=\"Total Execution Time\"\n                    number={this.state.Build2TotalExecutionTime}\n                  />\n                  <NumberWidget\n                    title=\"Total Executed Components\"\n                    number={this.state.Build2TotalComponentExecuted}\n                  />\n                </FormGroup>\n                <FormGroup col style={{visibility: this.state.Build2SummarySection ? 'visible' : 'hidden' }}>\n                  <BootstrapTable \n                  keyField=\"id\"\n                  data={ this.state.Build2ExecutionData }\n                  columns={ this.state.BuildHeaderColumn }\n                  striped\n                  hover\n                  condensed\n                  pagination={ paginationFactory(BuildPagination) }\n                  filter={ filterFactory() }\n                />\n                </FormGroup>\n              </Form>\n            </CardBody>\n          </Card>\n        </Col>\n      </Row>\n      </Page>\n    );\n  }\n}\nexport default DashboardPage;\n"],"sourceRoot":""}
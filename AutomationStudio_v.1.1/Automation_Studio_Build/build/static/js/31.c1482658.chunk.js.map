{"version":3,"sources":["components/Typography.js","components/Page.js","assets/img/bg/deleterow.JPG","assets/img/bg/addnewrow.JPG","pages/TestData.js"],"names":["tagMap","h1","h2","h3","h4","h5","h6","p","lead","blockquote","Typography","Tag","tag","className","type","restProps","classes","classNames","TypoComp","defaultProps","bem","bn","create","Page","title","breadcrumbs","children","b","e","length","map","name","active","index","key","module","exports","APIBasePath","window","ENV","APIURL","Options","options","option","Environment","GetListOfListItemforCommonItem","JsonItems","count","Object","keys","CommonDataItem","i","keyName","testdata","id","commonKeyName","commonKeyValue","push","GetAllModule","TestData","React","Component","constructor","props","super","addNewCommonData","this","state","modEnv","trim","ItemCount","setState","modal","modalValidationText","loader","lastOneId","checkmodEnv","deleteCommonData","allItem","selectedrowid","selectedCommonID","commontestDataItems","filter","m","handleOnSelect","row","isSelect","selectedrow","handleOnSelectForTestData","selectedTestData","addNewTestDataRow","ItemList","testDataItemrowList","ColList","testDatacolumns","loaderTestData","selectedID","UpdatedRow","NewItemContent","parseInt","error","deleteTestDataRow","testData","toggle","modalType","envEnv","testdataEnv","checkenvEnv","envCopy","checkenvCopy","envRename","checkenvRename","CommonDataTotalSize","CommonTestDataChange","testDataModule","allModuleName","checkTestDataEnv","checkTestDataModule","PreviousTestDataState","CommonTestData","a","fetch","homepage","json","homepageResponse","GetLoaderData","SelectenvEnv","event","target","value","SaveModuleTestData","tesEnv","tesModule","Message","NewItemList","newContent","j","text","APIBody","JSON","stringify","API","requestOptions","method","headers","body","APIResponse","APIResponseJson","servermessage","SaveTestDataRequest","SelectTestDataEnv","TEnv","oldEnv","toString","ModuleResponce","ModuleList","GetModule","SelectTestDataModule","TestDModule","OldModule","keyValNew","TestEn","TotalHeader","testDataFile","Req1","Response1","allTestID","allTestIDcontent","TestDataFromID","includes","testDataHeaderCol","dataField","Item","allRowItem","counter","TestID","CheckData","TestDataIteration1","RowList","k","undefined","err","Request1","SelectenvCopy","envcopyvalue","toLowerCase","SelectenvRename","DeleteEnv","env","ORAPI","ORResponse","ORJson","success","DeleteEnvReq","CreateNewEnvCopy","ExceptionMessage","envName","NewEnvCopy","SaveCommonTestData","commonTestDataItem","CommonJObject","ORjson","commonDataRequest","SelectmodEnv","onchangeenvvalue","URL","RenameEnv","render","selectRow","mode","onSelect","selectRowforTestData","sizePerPage","hideSizePerPage","hidePageListOnlyOnePage","columns","headerStyle","width","Cell","textFilter","validator","newValue","column","valid","message","totalCount","color","height","timeout","visible","lg","md","sm","xs","inline","for","invalid","onChange","bind","selected","onClick","isOpen","placeholder","src","bg1Image","style","bg3Image","keyField","data","striped","hover","condensed","pagination","paginationFactory","rowEvents","rowIndex","onDataSizeChange","handleDataChange","filterFactory","cellEdit","cellEditFactory","blurToSave","afterSaveCell","oldValue"],"mappings":"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","file":"static/js/31.c1482658.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport PropTypes from 'utils/propTypes';\n\nconst tagMap = {\n  h1: 'h1',\n  h2: 'h2',\n  h3: 'h3',\n  h4: 'h4',\n  h5: 'h5',\n  h6: 'h6',\n  'display-1': 'h1',\n  'display-2': 'h1',\n  'display-3': 'h1',\n  'display-4': 'h1',\n  p: 'p',\n  lead: 'p',\n  blockquote: 'blockquote',\n};\n\nconst types = Object.keys(tagMap);\n\nconst Typography = ({ tag: Tag, className, type, ...restProps }) => {\n  const classes = classNames({ [type]: !!type }, className);\n  let TypoComp;\n\n  if (Tag) {\n    TypoComp = Tag;\n  } else if (!Tag && tagMap[type]) {\n    TypoComp = tagMap[type];\n  } else {\n    TypoComp = 'p';\n  }\n\n  return <TypoComp {...restProps} className={classes} />;\n};\n\nTypography.propTypes = {\n  tag: PropTypes.component,\n  className: PropTypes.string,\n  type: PropTypes.oneOf(types),\n};\n\nTypography.defaultProps = {\n  type: 'p',\n};\n\nexport default Typography;\n","import React from 'react';\nimport PropTypes from 'utils/propTypes';\n\nimport bn from 'utils/bemnames';\n\nimport { Breadcrumb, BreadcrumbItem } from 'reactstrap';\n\nimport Typography from './Typography';\n\nconst bem = bn.create('page');\n\nconst Page = ({\n  title,\n  breadcrumbs,\n  tag: Tag,\n  className,\n  children,\n  ...restProps\n}) => {\n  const classes = bem.b('px-3', className);\n\n  return (\n    <Tag className={classes} {...restProps}>\n      <div className={bem.e('header')}>\n        {title && typeof title === 'string' ? (\n          <Typography type=\"h1\" className={bem.e('title')}>\n            {title}\n          </Typography>\n        ) : (\n            title\n          )}\n        {breadcrumbs && (\n          <Breadcrumb className={bem.e('breadcrumb')}>\n            <BreadcrumbItem>Home</BreadcrumbItem>\n            {breadcrumbs.length &&\n              breadcrumbs.map(({ name, active }, index) => (\n                <BreadcrumbItem key={index} active={active}>\n                  {name}\n                </BreadcrumbItem>\n              ))}\n          </Breadcrumb>\n        )}\n      </div>\n      {children}\n    </Tag>\n  );\n};\n\nPage.propTypes = {\n  tag: PropTypes.component,\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n  className: PropTypes.string,\n  children: PropTypes.node,\n  breadcrumbs: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      active: PropTypes.bool,\n    })\n  ),\n};\n\nPage.defaultProps = {\n  tag: 'div',\n  title: '',\n};\n\nexport default Page;\n","module.exports = __webpack_public_path__ + \"static/media/deleterow.9eb1ed86.JPG\";","module.exports = __webpack_public_path__ + \"static/media/addnewrow.11af4dc5.JPG\";","import Page from 'components/Page';\nimport React from 'react';\nimport bg3Image from 'assets/img/bg/deleterow.JPG';\nimport bg1Image from 'assets/img/bg/addnewrow.JPG';\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  Col,\n  Form,\n  FormGroup,\n  Input,\n  Label,\n  Row,\n  CardImg,\n  Modal,\n  ModalBody,\n  ModalFooter,\n  ModalHeader,\n} from 'reactstrap';\nimport Loader from 'react-loader-spinner';\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\nimport cellEditFactory from 'react-bootstrap-table2-editor';\nimport paginationFactory from 'react-bootstrap-table2-paginator';\nimport filterFactory, { textFilter } from 'react-bootstrap-table2-filter';\n\nvar APIBasePath= window.ENV.APIURL;\n\nfunction Options({ options }) {\n    return (\n        options.map(option => \n                    <option key={option.Environment}>                                   \n                    {option.Environment}\n                    </option>)\n                   );\n}\n\nfunction GetListOfListItemforCommonItem(JsonItems) \n{\n  let count = Object.keys(JsonItems).length;\n  let CommonDataItem=[];\n  for(let i=1;i<=count;i++)\n  {\n\tvar keyName =Object.keys(JsonItems)[i-1];\n\tvar keyVal =JsonItems[keyName];\n\tvar  testdata={id:i,commonKeyName:keyName,commonKeyValue:keyVal};\n\tCommonDataItem.push(testdata);\n  }\n  return CommonDataItem;\n}\nfunction GetAllModule({ options }) {\n\n\treturn (\n\t  Object.keys(options).map((key)  => \n\t  <option >{options[key]}</option>)\n\t);\n\t\n  }\nclass TestData extends React.Component{\n\n\tconstructor(props)\n\t{\n\t\tsuper(props);\n\t\tthis.state=\n\t\t{\n\t\t\tenvEnv:'',\n\t\t\ttestdataEnv:'',\n\t\t\tcheckenvEnv:false,\n\t\t\tenvCopy:'',\n\t\t\tcheckenvCopy:false,\n\t\t\tenvRename:'',\n\t\t\tcheckenvRename:false,\n\t\t\tCommonDataItem: [],\n\t\t\tmodEnv:'',\n\t\t\tcheckmodEnv:false,\n\t\t\tCommonDataTotalSize:0,\n\t\t\tCommonTestDataChange: false,\n\t\t\tselectedCommonID:0,\n\t\t\tselectedTestData:0,\n\t\t\ttestDataModule:'',\n\t\t\tallModuleName: [],\n\t\t\ttestDatacolumns :[{}],\n\t\t\ttestDataItemrowList:[],\n\t\t\tcheckTestDataEnv:false,\n\t\t\tcheckTestDataModule:false,\n\t\t\tPreviousTestDataState:[],\n\t\t\tCommonTestData:[],\n\t\t\tloader:true,\n\t\t\tloaderTestData:false,\n\t\t}\n\n\t\tconst GetLoaderData = async () => \n\t\t{\n\t\t  const homepage = await fetch(APIBasePath+'dashboard');\n\t\t  const homepageResponse = await homepage.json();\n\t\t  this.setState({CommonTestData:homepageResponse.CommonTestData});\n\t\t  this.setState({loader:false});\n\t\t}\n\t\tGetLoaderData();\n\t\t\n\t}\n\n\tSelectenvEnv(event)\n\t{\n\t  \n\t  this.setState({envEnv: event.target.value})\n\t  \n\t}\n\tSaveModuleTestData()\n\t{\n\t\tvar tesEnv = this.state.testdataEnv;\n\t\tvar tesModule = this.state.testDataModule;\n\t\tvar Message='';\n\t\tif(tesEnv.trim()===\"\")\n\t\t{\n\t\t\tthis.setState({checkTestDataEnv:true})\n\t\t\tMessage='Environment can not be blank';\n\t\t}\n\t\tif(tesModule.trim()===\"\")\n\t\t{\n\t\t\tthis.setState({checkTestDataModule:true})\n\t\t\tMessage='Module can not be blank';\n\t\t}\n\t\tif(Message.trim()!==\"\")\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\tvar ItemList = this.state.testDataItemrowList;\n\t\tvar ColList = this.state.testDatacolumns;\n\t\tif(ItemList.length===0)\n\t\t{\n\t\t\tthis.setState({modal:true})\n\t\t    return this.setState({modalValidationText:'Please add the test data information.'});\n\t\t}\n\t\tif(ColList.length===1 || ColList.length===0)\n\t\t{\n\t\t\tthis.setState({modal:true})\n\t\t    return this.setState({modalValidationText:'Please add the test data information.'});\n\t\t}\n\t\tfor(let i=0;i<ItemList.length;i++)\n\t\t{\n\t\t\tvar testIDName= ItemList[i]['testdatacolid1'];\n\t\t\tif(testIDName.trim() ===\"\")\n\t\t\t{\n\t\t\t\tthis.setState({modal:true})\n\t\t\t\treturn this.setState({modalValidationText:'Please add the test data information for record number '+(i+1)+', before saving the record.'});\n\t\t\t}\n\t\t}\n\t\tthis.setState({loaderTestData:true})\n\t\tvar NewItemList=[];\n\t\t\n\t\tfor(let i=0;i<ItemList.length;i++)\n\t\t{\n\t\t\tvar newContent={}\n\t\t\tnewContent['id']=i+1;\n\t\t\tfor(let j=1;j<ColList.length;j++)\n\t\t\t{\n\t\t\t\tnewContent[ColList[j].text]=ItemList[i]['testdatacolid'+j]\n\t\t\t}\n\t\t\tNewItemList.push(newContent);\n\t\t}\n\t\t//@ Post Request Send for Save Test Data.\n\t\t//console.log(NewItemList)\n\t\tvar APIBody = JSON.stringify(JSON.stringify(NewItemList))\n\t\t//var APIBody = JSON.stringify({QA:1})\n\t\tvar API =APIBasePath+'testdata?env='+tesEnv+'&module='+tesModule;\n        var requestOptions = {\n          method: 'POST',\n          headers: {\"Accept\": \"application/json; odata=verbose\",'Content-type': 'application/x-www-form-urlencoded'},\n          body: APIBody\n        };\n        const SaveTestDataRequest = async () => \n        {\n          const APIResponse = await fetch(API,requestOptions);\n\t\t  const APIResponseJson = await APIResponse.json();\n\t\t  this.setState({loaderTestData:false})\n\t\t  this.setState({modal:true})\n\t\t  return this.setState({modalValidationText:APIResponseJson.servermessage})\n          \n          \n        }\n        SaveTestDataRequest();\n\t}\n\tSelectTestDataEnv(event)\n\t{\n\t  var TEnv= event.target.value;\n\t  var oldEnv = this.state.testdataEnv;\n\t  \n\t  this.setState({testdataEnv: TEnv})\n\t  this.setState({checkTestDataEnv:false})\n\t  if(TEnv.trim().toString() !== oldEnv.trim().toString())\n\t  {\n\t\tthis.setState({loaderTestData:true})\n\t\tconst GetModule = async () => \n\t\t{\n\t\t\tconst ModuleResponce = await fetch(APIBasePath+'testcase?moduleName=')\n\t\t\tconst ModuleList = await ModuleResponce.json();\n\t\t\tthis.setState({allModuleName:ModuleList})\n\t\t\tthis.setState({loaderTestData:false})\n\t\t}\n\t\tGetModule();\n\t  }\n\t  \n\t}\n\n\tSelectTestDataModule(event)\n\t{\n\t\tvar TestDModule = event.target.value;\n\t\tvar OldModule = this.state.testDataModule;\n\t\t\n\t\tthis.setState({testDataModule : TestDModule})\n\t\tthis.setState({checkTestDataModule:false})\n\t\tvar keyName= '';\n\t\tvar keyValNew='';\n\t\t//@ Logic For Test Data\n\t\tvar TestEn= this.state.testdataEnv;\n\t\tif(TestDModule.trim().toString() !== OldModule.trim().toString())\n\t\t{\n\t\t\ttry \n\t\t\t{\n\t\t\t  this.setState({loaderTestData:true})\n\t\t\t  this.setState({PreviousTestDataState:[]})\n\t\t\t  var TotalHeader=[];\n\t\t\t  var testDataFile = {};\n\t\t\t  const Request1 = async () => \n\t\t\t  {\n\t\t\t\tconst Req1 = await fetch(APIBasePath+'testdata?env='+TestEn+'&module='+TestDModule)\n\t\t\t\tconst Response1 = await Req1.json();\n\t\t\t\ttestDataFile=Response1;\n\t\t\t\tlet allTestID = Object.keys(testDataFile);\n\t\t\t\tfor(let i=0;i<allTestID.length;i++)\n\t\t\t\t{\n\t\t\t\t  var allTestIDcontent = testDataFile[allTestID[i]][0][1];\n\t\t\t\t  let TestDataFromID= Object.keys(allTestIDcontent);\n\t\t\t\t  for(let j=0;j<TestDataFromID.length;j++)\n\t\t\t\t  {\n\t\t\t\t\t keyName =TestDataFromID[j];\n\t\t\t\t\tif(!TotalHeader.includes(keyName))\n\t\t\t\t\t{\n\t\t\t\t\t  TotalHeader.push(keyName);\n\t\t\t\t\t}\n\t\t\t\t  }\n\t\t\t\t}\n\t\t\t\t//@ Set Header Column\n\t\t\t\tthis.setState({testDatacolumns:[]});\n\t\t\t\tvar testDataHeaderCol= [{dataField: 'id',text: '#'},{dataField: 'testdatacolid1',text: 'TESTID'}];\n\t\t\t\tthis.setState({ testDatacolumns:testDataHeaderCol});\n\t\t\t\tthis.setState({ testDataItemrowList:[]});\n\t\t\t\t\n\t\t\t\tfor(let i=0;i<TotalHeader.length;i++)\n\t\t\t\t{\n\t\t\t\t  var Item={}\n\t\t\t\t  var coldatafiledName='testdatacolid'+(i+2)\n\t\t\t\t  Item={dataField:coldatafiledName,text:TotalHeader[i]}\n\t\t\t\t  testDataHeaderCol.push(Item)\n\t\t\t\t}\n\t\t\t\tthis.setState({ testDatacolumns:testDataHeaderCol});\n  \n\t\t\t\t//@ Set Row Details\n\t\t\t\tvar allRowItem=[];\n\t\t\t\t\n\t\t\t\tvar counter=0;\n\t\t\t\tfor(let i=0;i<allTestID.length;i++)\n\t\t\t\t{\n\t\t\t\t\tvar TestID=allTestID[i];\n\t\t\t\t   var CheckData = testDataFile[TestID][0];\n\t\t\t\t   var TestDataIteration1 = Object.keys(CheckData);\n\t\t\t\t\tfor(let j=0;j<TestDataIteration1.length;j++)\n\t\t\t\t\t{\n\t\t\t\t\t  counter=counter+1;\n\t\t\t\t\t  var RowList={}\n\t\t\t\t\t  RowList['id']=counter;\n\t\t\t\t\t  RowList['testdatacolid1']=TestID;\n\t\t\t\t\t  for(let k=0;k<TotalHeader.length;k++)\n\t\t\t\t\t  {\n\t\t\t\t\t\t   keyName= TotalHeader[k];\n\t\t\t\t\t\t   keyValNew=''\n\t\t\t\t\t\t  try\n\t\t\t\t\t\t  {\n\t\t\t\t\t\t\tkeyValNew= CheckData[j+1][keyName];\n\t\t\t\t\t\t   if(keyValNew===undefined)\n\t\t\t\t\t\t   {\n\t\t\t\t\t\t\t  keyValNew='';\n\t\t\t\t\t\t   }\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  catch(err)\n\t\t\t\t\t\t  {\n\t\t\t\t\t\t\t  keyValNew='';\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  var colNumber = (k+2);\n\t\t\t\t\t\t  RowList['testdatacolid'+colNumber] = keyValNew\n\t\t\t\t\t  }\n\t\t\t\t\t  allRowItem.push(RowList);\n\t\t\t\t  }\n\t\t\t\t  \n\t\t\t\t}\n\t\t\t   this.setState({ testDataItemrowList: allRowItem});\n\t\t\t   this.setState({PreviousTestDataState:allRowItem})\n\t\t\t   this.setState({loaderTestData:false})\n\t\t\t  }\n\t\t\t  Request1();\n\n\n\t\t\t}\n\t\t\tcatch (err) \n\t\t\t{\n\t\t\t\tthis.setState({testDatacolumns:[]});\n\t\t\t\tthis.setState({ testDataItemrowList:[]});\n\t\t\t\tthis.setState({loaderTestData:false})\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\t\n\t\n\t}\n\tSelectenvCopy(event)\n\t{\n\t  var envcopyvalue = event.target.value;\n\t  \n\t  this.setState({envCopy: event.target.value})\n\t  this.setState({checkenvCopy:false})\n\t  \n\t  var allItem = this.state.CommonTestData\n\t  for(let i=0;i<allItem.length;i++)\n\t  {\n\t\t  if(allItem[i].Environment.toString().trim().toLowerCase()===envcopyvalue.trim().toString().toLowerCase())\n\t\t  {\n\t\t\tthis.setState({checkenvCopy:true})\n\t\t\treturn this.setState({modalValidationText:'Env is already present'})\n\t\t  }\n\t  }\n  \n\t}\n\n\tSelectenvRename(event)\n\t{\n\t  var envcopyvalue=event.target.value;\n\t  \n\t  this.setState({envRename: event.target.value})\n\t  this.setState({checkenvRename:false})\n\t  \n\t  var allItem = this.state.CommonTestData\n\t  for(let i=0;i<allItem.length;i++)\n\t  {\n\t\t  if(allItem[i].Environment.toString().trim().toLowerCase()===envcopyvalue.trim().toString().toLowerCase())\n\t\t  {\n\t\t\tthis.setState({checkenvRename:true})\n\t\t\treturn this.setState({modalValidationText:'Env is already present'})\n\t\t  }\n\t  }\n  \n\t}\n\n\tDeleteEnv()\n\t{\n\t  //var ExceptionMessage='';\n\t  var env= this.state.envEnv\n\t  if(env.trim()===\"\")\n\t  {\n\t\t//ExceptionMessage= ExceptionMessage+ 'Environment* can not be left blank.'\n\t\treturn this.setState({checkenvEnv:true})\n\t  }\n      this.setState({loader:true})\n\t  var ORAPI =APIBasePath+'or?env='+env;\n\t  const DeleteEnvReq = async () => \n\t  {\n\t\tconst ORResponse = await fetch(ORAPI);\n\t\tconst ORJson = await ORResponse.json();\n\t\tif(ORJson.success.toLowerCase()==='true')\n\t\t{\n\t\t  this.setState({loader:true})\n\t\t  this.state.envEnv='';\n\t\t  this.setState({modal:true})\n\t\t  return this.setState({modalValidationText:ORJson.servermessage})\n\t\t}\n\t\telse\n\t\t{\n\t\t  this.setState({loader:true})\n\t\t  this.setState({modal:true})\n\t\t  return this.setState({modalValidationText:ORJson.servermessage})\n\t\t}\n\t\t\n\t\t\n\t  }\n\t  DeleteEnvReq();\n  \n\t}\n\n\tCreateNewEnvCopy()\n\t{\n\t  var ExceptionMessage ='';\n\t  var envName= this.state.envEnv\n\t  var envCopy= this.state.envCopy\n\t  if(envName.trim()===\"\")\n\t  {\n\t\tthis.setState({checkenvEnv:true})\n\t\tExceptionMessage= ExceptionMessage+ 'Environment* can not be left blank.'\n\t  }\n\t  if(envCopy.trim()===\"\")\n\t  {\n\t\tthis.setState({checkenvCopy:true})\n\t\tExceptionMessage= ExceptionMessage+ 'New Env. Copy* can not be left blank.'\n\t  }\n\t  if(ExceptionMessage.trim() !==\"\")\n\t  {\n\t   // this.setState({modal:true})\n\t\treturn this.setState({modalValidationText:ExceptionMessage})\n\t  }\n\t  if(envName.trim().toLowerCase()===envCopy.trim().toLowerCase())\n\t  {\n\t\t//this.setState({modal:true})\n\t\tthis.setState({checkenvCopy:true})\n\t\treturn this.setState({modalValidationText:'No Changes to Save'})\n\t  }\n\t  this.setState({loader:true})\n\t  var allItem = this.state.CommonTestData\n\t  for(let i=0;i<allItem.length;i++)\n\t  {\n\t\t  if(allItem[i].Environment.toString().trim().toLowerCase()===envCopy.trim().toString().toLowerCase())\n\t\t  {\n\t\t\tthis.setState({checkenvCopy:true})\n\t\t\treturn this.setState({modalValidationText:'No Changes to Save'})\n\t\t  }\n\t  }\n\t  var ORAPI =APIBasePath+'or?env='+envName+'&envcopy='+envCopy;\n\t  const NewEnvCopy = async () => \n\t  {\n\t\tconst ORResponse = await fetch(ORAPI);\n\t\tconst ORJson = await ORResponse.json();\n\t\tif(ORJson.success.toLowerCase()==='true')\n\t\t{\n\t\t  this.setState({loader:false})\n\t\t  this.state.envEnv='';\n\t\t  this.setState({modal:true})\n\t\t  return this.setState({modalValidationText:ORJson.servermessage})\n\t\t}\n\t\telse\n\t\t{\n\t\t  this.setState({loader:false})\n\t\t  this.setState({modal:true})\n\t\t  return this.setState({modalValidationText:ORJson.servermessage})\n\t\t}\n\t\t\n\t\t\n\t  }\n\t  NewEnvCopy();\n\t} \n\n\t  SaveCommonTestData()\n\t {\n\t\tvar ExceptionMessage ='';\n\t\tvar envName= this.state.modEnv\n\t\tif(envName.trim()===\"\")\n\t\t{\n\t\t  this.setState({checkmodEnv:true})\n\t\t  ExceptionMessage= ExceptionMessage+ 'Environment* can not be left blank.'\n\t\t}\n\t\tif(ExceptionMessage.trim() !==\"\")\n\t\t{\n\t\t // this.setState({modal:true})\n\t\t  return this.setState({modalValidationText:ExceptionMessage})\n\t\t}\n\t\tif(!this.state.CommonTestDataChange)\n\t\t{\n\t\t\tthis.setState({modal:true})\n\t\t\treturn this.setState({modalValidationText:'No Changes to Save'})\n\t\t}\n\n\t\t//@ Get all value from Common test data\n\t\tthis.setState({loader:true})\n\t\tvar commonTestDataItem = this.state.CommonDataItem;\n\t\tvar CommonJObject ={};\n\t\tfor(let i=0;i<commonTestDataItem.length;i++)\n\t\t{\n\t\t\tCommonJObject[commonTestDataItem[i].commonKeyName.toString()]=commonTestDataItem[i].commonKeyValue.toString();\n\t\t}\n\t\t\n\t\tvar ORjson = JSON.stringify(CommonJObject)\n\t\tvar ORAPI =APIBasePath+'testdata?env='+envName;\n\t\tvar requestOptions = {\n\t\t  method: 'POST',\n\t\t headers: {\"Accept\": \"application/json; odata=verbose\",'Content-type': 'application/x-www-form-urlencoded'},\n\t\t  body: ORjson\n\t\t};\n\t\tconst commonDataRequest = async () => \n\t\t{\n\t\t  const ORResponse = await fetch(ORAPI,requestOptions);\n\t\t  const ORJson = await ORResponse.json();\n\t\t  this.setState({modal:true})\n\t\t  this.setState({loader:false})\n\t\t  return this.setState({modalValidationText:ORJson.servermessage})\n\t\t}\n\t\tcommonDataRequest();\n\n\t }\n\n\t SelectmodEnv(event){\n\t\tthis.setState({CommonDataItem : []})\n\t\tthis.setState({modEnv : ''})\n\t\tthis.setState({CommonDataTotalSize : 0})\n\t\tthis.setState({checkmodEnv:false})\n\t\tvar onchangeenvvalue = event.target.value;\n\t\tthis.setState({modEnv : event.target.value})\n\t\tthis.setState({loader:true})\n\t\tvar URL =  APIBasePath+'testscript?commonitem='+onchangeenvvalue;\n\t\tconst Request1 = async () => \n\t\t{\n\t\t  const Req1 = await fetch(URL)\n\t\t  const Response1 = await Req1.json();\n\t\t  this.setState({CommonDataItem:GetListOfListItemforCommonItem(Response1)})\n\t\t  this.setState({CommonDataTotalSize:this.state.CommonDataItem.length})\n\t\t  this.setState({loader:false})\n\t\t}\n\t\tRequest1();\n\n\t  }\n\n\tRenameEnv()\n\t{\n\t  var ExceptionMessage ='';\n\t  var envName= this.state.envEnv\n\t  var envCopy= this.state.envRename\n\t  if(envName.trim()===\"\")\n\t  {\n\t\tthis.setState({checkenvEnv:true})\n\t\tExceptionMessage= ExceptionMessage+ 'Environment* can not be left blank.'\n\t  }\n\t  if(envCopy.trim()===\"\")\n\t  {\n\t\tthis.setState({checkenvRename:true})\n\t\tExceptionMessage= ExceptionMessage+ 'Rename Env* can not be left blank.'\n\t  }\n\t  if(ExceptionMessage.trim() !==\"\")\n\t  {\n\t   // this.setState({modal:true})\n\t\treturn this.setState({modalValidationText:ExceptionMessage})\n\t  }\n\t  if(envName.trim().toLowerCase()===envCopy.trim().toLowerCase())\n\t  {\n\t\t//this.setState({modal:true})\n\t\tthis.setState({checkenvRename:true})\n\t\treturn this.setState({modalValidationText:'No Changes to Save'})\n\t  }\n\t  var allItem = this.state.CommonTestData\n\t  for(let i=0;i<allItem.length;i++)\n\t  {\n\t\t  if(allItem[i].Environment.toString().trim().toLowerCase()===envCopy.trim().toString().toLowerCase())\n\t\t  {\n\t\t\tthis.setState({checkenvRename:true})\n\t\t\treturn this.setState({modalValidationText:'Env is already present'})\n\t\t  }\n\t  }\n      this.setState({loader:true})\n\t  var ORAPI =APIBasePath+'or?oldname='+envName+'&newname='+envCopy+'&id=';\n\t  const RenameEnv = async () => \n\t  {\n\t\tconst ORResponse = await fetch(ORAPI);\n\t\tconst ORJson = await ORResponse.json();\n\t\tif(ORJson.success.toLowerCase()==='true')\n\t\t{\n\t\t  this.setState({loader:true})\n\t\t  this.state.envEnv='';\n\t\t  this.setState({modal:true})\n\t\t  return this.setState({modalValidationText:ORJson.servermessage})\n\t\t}\n\t\telse\n\t\t{\n\t\t  this.setState({loader:true})\n\t\t  this.setState({modal:true})\n\t\t  return this.setState({modalValidationText:ORJson.servermessage})\n\t\t}\n\t\t\n\t\t\n\t  }\n\t  RenameEnv();\n\n  \n\t}\n\taddNewCommonData = () => \n\t{\n\t\tvar env = this.state.modEnv;\n\t\tif(env.trim()===\"\")\n\t\t{\n\t\t\tthis.setState({checkmodEnv:true})\n\t\t\treturn;\n\t\t}\n\t\tvar ItemCount =this.state.CommonDataItem.length\n\t\t//console.log(ItemCount);\n\t\tif(ItemCount>0)\n\t\t{\n\t\t\tvar valuecheck = this.state.CommonDataItem[ItemCount-1].commonKeyName\n\t\t\t//console.log(valuecheck);\n\t\t\tif(valuecheck.trim()===\"\")\n\t\t\t{\n\t\t\t\tthis.setState({modal:true})\n\t\t\t    return this.setState({modalValidationText:'Before adding new Common key, add previous Common key.'})\n\t\t\t}\n\t\t}\n\t\tthis.setState({loader:true})\n\t\tvar lastOneId = this.state.CommonDataItem.length + 1;\n\t\tthis.setState({ CommonDataItem: [...this.state.CommonDataItem, {\n\t\t\tid: `${lastOneId}`, commonKeyName: ``,commonKeyValue:``\n\t\t}] });\n\t\tthis.setState({loader:false})\n\t}\n\tdeleteCommonData = () => {\n\n\t\tvar allItem = this.state.CommonDataItem.length;\n\t\tif(allItem===0)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\tvar selectedrowid = this.state.selectedCommonID;\n\t\tif(selectedrowid===0)\n\t\t{\n\t\t\tthis.setState({modal:true})\n\t\t\treturn this.setState({modalValidationText:'Please select record before delete action.'})\n\t\t}\n\t\tthis.setState({loader:true})\n\t\tvar commontestDataItems = this.state.CommonDataItem.filter(m => m.id !== selectedrowid);\n\t\tfor(let i=selectedrowid-1;i<allItem-1;i++)\n\t\t{\n\t\t\tcommontestDataItems[i].id=i+1;\n\t\t}\n\t\tthis.setState({ CommonDataItem: commontestDataItems });\n\t\tthis.setState({ selectedCommonID:selectedrowid });\n\t\tthis.setState({loader:false})\n\t\t\n\n\t  };\n\t  handleOnSelect = (row, isSelect) => {\n\t\tif (isSelect) \n\t\t{\n\t\t\tvar selectedrow= row.id;\n\t\t\tthis.setState({ selectedCommonID:selectedrow });\n\n\t\t}\n\t}\n\thandleOnSelectForTestData = (row, isSelect) => {\n\t\tif (isSelect) \n\t\t{\n\t\t\tvar selectedrow= row.id;\n\t\t\tthis.setState({ selectedTestData:selectedrow });\n\n\t\t}\n\t}\n\taddNewTestDataRow = () => \n\t{\n\t\tvar ItemList = this.state.testDataItemrowList;\n\t\tvar ColList = this.state.testDatacolumns;\n\t\tif(ColList.length===1)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\tif(ItemList.length>1)\n\t\t{\n\t\t\tfor(let i=0;i<ItemList.length;i++)\n\t\t\t{\n\t\t\t\tvar testIDName= ItemList[i]['testdatacolid1'];\n\t\t\t\tif(testIDName.trim() ===\"\")\n\t\t\t\t{\n\t\t\t\t\tthis.setState({modal:true})\n\t\t\t        return this.setState({modalValidationText:'Please add the test data information for record number '+(i+1)+', before adding new record.'});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.setState({loaderTestData:true})\n\t\tvar selectedID = this.state.selectedTestData;\n\t\tif(selectedID>ItemList.length)\n\t\t{\n\t\t\tselectedID=0;\n\t\t}\n\t\t//@ Add New Row using variable\n\t\tif(selectedID ===0)\n\t\t{\n\t\t\tselectedID= ItemList.length;\n\t\t}\n\t\tvar UpdatedRow=[]\n\t\tfor(let i=0;i<selectedID;i++)\n\t\t{\n\t\t\tUpdatedRow[i]= this.state.testDataItemrowList[i];\n\t\t}\n\t\t//@ add New Row\n\t\tvar NewItemContent ={};\n\t\ttry\n\t\t{\n\t\tselectedID= parseInt(selectedID.trim())\n\t\t}\n\t\tcatch(error)\n\t\t{}\n\t\tNewItemContent['id']=selectedID+1;\n\t\tNewItemContent['testdatacolid1']=''\n\t\tfor(let i=2;i<ColList.length;i++)\n\t\t{\n\t\t\tvar keyName = 'testdatacolid'+i\n\t\t\tNewItemContent[keyName]='';\n\t\t}\n\t\tUpdatedRow.push(NewItemContent)\n\t\tfor(let i=selectedID;i<ItemList.length;i++)\n\t\t{\n\t\t\tItemList[i]['id']=i+2;\n\t\t\tUpdatedRow.push(ItemList[i]);\n\t\t}\n\t\tthis.setState({ testDataItemrowList: UpdatedRow});\n\t\tthis.setState({loaderTestData:false})\n\n\t}\n\tdeleteTestDataRow = () =>\n\t {\n\t\tvar ItemList = this.state.testDataItemrowList;\n\t\tif(ItemList.length===0)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\tvar selectedID = this.state.selectedTestData;\n\t\tif(selectedID===0)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\tthis.setState({loaderTestData:true})\n\t\tvar testData = this.state.testDataItemrowList.filter(m => m.id !== selectedID);\n\t\tfor(let i=selectedID;i<=testData.length;i++)\n\t\t{\n\t\t\ttestData[i-1]['id']=i;\n\t\t}\n\t\tthis.setState({ testDataItemrowList: testData });\n\t\tthis.setState({selectedTestData:selectedID})\n\t\tthis.setState({loaderTestData:false})\n\t  };\n\n\ttoggle = modalType => () => {\n\t\tif (!modalType) {\n\t\t  return this.setState({\n\t\t\tmodal: !this.state.modal,\n\t\t  });\n\t\t}\n\t\n\t\tthis.setState({\n\t\t  [`modal_${modalType}`]: !this.state[`modal_${modalType}`],\n\t\t});\n\t  };\n\t\n\t  render() {\n\t\n\t\tvar {allModuleName} = this.state;\n\t  \n\t\tconst selectRow = {\n\t\t\tmode: 'radio',\n\t\t\tonSelect: this.handleOnSelect\n\t\t\t};\n\t\tconst selectRowforTestData = {\n\t\t\tmode: 'radio',\n\t\t\tonSelect: this.handleOnSelectForTestData\n\t\t\t};\n\t\tconst rowEvents = {\n\t\t\tonClick: (e, row, rowIndex) => {\n\t\t\t\t//console.log(`clicked on row with index: ${rowIndex}`);\n\t\t}};\n\t\tconst afterSaveCell=(oldValue, newValue) =>\n\t\t{\n\t\t\tthis.setState({CommonTestDataChange:true})\n\t\t};\n\t\tconst options = {\n\t\tsizePerPage: 20,\n\t\thideSizePerPage: true,\n\t\thidePageListOnlyOnePage: true\n\t\t};\n\t\tvar columns = [\n\t\t\t{\n\t\t\t  dataField: 'id',\n\t\t\t  text: '#',\n\t\t\t  headerStyle: { width: '40px' },\n\t\t\t  Cell: row => (\n\t\t\t\t<div>\n\t\t\t\t  <span title={ row.value }>{ row.value }</span>\n\t\t\t\t</div>\n\t\t\t  )\n\t\t\t},\n\t\t\t{\n\t\t\t  dataField: 'commonKeyName',\n\t\t\t  text: 'Key Name*',\n\t\t\t  filter: textFilter(),\n\t\t\t  validator: (newValue, row, column) => {\n\t\t\t\tif (newValue.trim()==='') {\n\t\t\t\t  return {\n\t\t\t\t\tvalid: false,\n\t\t\t\t\tmessage: 'Key Name* can not be blank.'\n\t\t\t\t  };\n\t\t\t\t}\n\t\t\t\tvar totalCount = this.state.CommonDataItem.length;\n\t\t\t\tfor(let i=0;i<totalCount;i++)\n\t\t\t\t{\n\t\t\t\t\tvar ItemName = this.state.CommonDataItem[i].commonKeyName;\n\t\t\t\t\tif(ItemName.trim().toLowerCase()===newValue.trim().toLowerCase())\n\t\t\t\t\t{\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tvalid: false,\n\t\t\t\t\t\t\tmessage: 'Key Name* can not be duplicate.'\n\t\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t  }\n\t\t\t},\n\t\t\t{\n\t\t\t\tdataField: 'commonKeyValue',\n\t\t\t\ttext: 'Key Value',\n\t\t\t\tfilter: textFilter()\n\t\t\t  }\n\t\t  ];\n  return (\n    <Page title=\"Test Data\" breadcrumbs={[{ name: 'Test Data', active: true }]}>\n\t\t<Loader \n         type=\"ThreeDots\"\n         color=\"#00BFFF\"\n         height={50}\n         width={100}\n         timeout={120000} //3 secs\n         visible = {this.state.loader}\n        />\n\t\t  <Row>\n\t\t  <Col lg={6} md={6} sm={6} xs={12}>\n          <Card>\n            <CardHeader>Update Environment</CardHeader>\n            <CardBody>\n              <Form inline>\n                <FormGroup row>\n                  <Label for=\"exampleSelect\" >\n                    Environment*\n                  </Label>\n                  <Col >\n                    <Input invalid={this.state.checkenvEnv} type=\"select\" name=\"envEnv\" value={this.state.envEnv} onChange={this.SelectenvEnv.bind(this)}>\n\t\t\t\t\t<option selected=\"selected\">{this.state.envEnv}</option>\n\t\t\t\t\t<Options options={this.state.CommonTestData} />\n\t\t\t\t\t</Input>\n                  </Col>\n\t\t\t\t</FormGroup>\n\t\t\t\t<Col>\n\t\t\t\t  <Button onClick={this.DeleteEnv.bind(this)} color=\"primary\" name=\"envDelete\" >Delete</Button>\n\t\t\t\t  <Modal\n\t\t\t\t\tisOpen={this.state.modal}\n\t\t\t\t\ttoggle={this.toggle()}\n\t\t\t\t\tclassName={this.props.className}>\n\t\t\t\t\t<ModalHeader  toggle={this.toggle()}> Information</ModalHeader>\n\t\t\t\t\t<ModalBody >\n\t\t\t\t\t{this.state.modalValidationText}\n\t\t\t\t\t</ModalBody>\n\t\t\t\t\t<ModalFooter>\n\t\t\t\t\t<Button color=\"secondary\" onClick={this.toggle()}>\n\t\t\t\t\t\tOK\n\t\t\t\t\t</Button>\n\t\t\t\t\t</ModalFooter>\n              \t</Modal>\n\t\t\t\t</Col>\n\t\t\t  <FormGroup row>\n                  <Label for=\"exampleSelect\" >\n                    New Env. Copy*\n                  </Label>\n                    <Col >\n                    <Input invalid={this.state.checkenvCopy} value={this.state.envCopy} type=\"input\" name=\"newEnvCopy\" placeholder=\"New env name.\"  onChange={this.SelectenvCopy.bind(this)}/>\n                  </Col>\n              </FormGroup>\n\t\t\t  <Col>\n\t\t\t\t  <Button onClick={this.CreateNewEnvCopy.bind(this)} color=\"primary\" name =\"newEnvCopy\">Save</Button>\n\t\t\t  </Col>\n\t\t\t  <FormGroup row>\n                  <Label for=\"exampleSelect\" >\n                    Rename Env.*\n                  </Label>\n                    <Col >\n                    <Input invalid={this.state.checkenvRename} value={this.state.envRename} type=\"input\" name=\"newEnvName\" placeholder=\"New env name.\" onChange={this.SelectenvRename.bind(this)}/>\n                  </Col>\n              </FormGroup>\n\t\t\t  <Col>\n\t\t\t\t  <Button onClick={this.RenameEnv.bind(this)} color=\"primary\" name =\"newEnvName\">Save</Button>\n\t\t\t  </Col>\n              </Form>\n            </CardBody>\n          </Card>\n        </Col>\n\t\t<Col lg={6} md={6} sm={6} xs={12}>\n          <Card>\n            <CardHeader>Common Test Data \n\t\t\t\t<row>\n\t\t\t\t\t<Button onClick={this.SaveCommonTestData.bind(this)} color=\"primary\" name =\"saveCommonTestData\">Save</Button>\n\t\t\t\t</row>\n\t\t\t</CardHeader>\n\t\t\t<CardHeader>Environment*\n\t\t\t\t<FormGroup row>\n                \t<Col >\n                    \t<Input invalid={this.state.checkmodEnv} type=\"select\" name=\"modEnv\" value={this.state.modEnv} onChange={this.SelectmodEnv.bind(this)}>\n\t\t\t\t\t\t<option selected=\"selected\">{this.state.modEnv}</option>\n\t\t\t\t\t\t<Options options={this.state.CommonTestData} />\n\t\t\t\t\t\t</Input>\n                  \t</Col>\n\t\t\t\t  \t<CardImg\n\t\t\t\t\t className=\"card-img-right\"\n\t\t\t\t\t  src={bg1Image}\n\t\t\t\t\t  style={{ width: 'auto', height: 30 }}\n\t\t\t\t\t  onClick={ () => this.addNewCommonData() }\n\t\t\t\t\t/>\n\t\t\t\t\t<CardImg\n\t\t\t\t\t  className=\"card-img-right\"\n\t\t\t\t\t  src={bg3Image}\n\t\t\t\t\t  style={{ width: 'auto', height: 30 }}\n\t\t\t\t\t  onClick={ () => this.deleteCommonData() } \n\t\t\t\t\t/>\n             \t</FormGroup>\n\t\t\t</CardHeader>\n            <CardBody>\n\t\t\t<BootstrapTable\n\t\t\t\tkeyField=\"id\"\n\t\t\t\tdata={ this.state.CommonDataItem }\n\t\t\t\tcolumns={ columns }\n\t\t\t\tstriped\n\t\t\t\thover\n\t\t\t\tcondensed\n\t\t\t\tpagination={ paginationFactory(options) }\n\t\t\t\trowEvents={ rowEvents }\n\t\t\t\tonDataSizeChange={ this.handleDataChange }\n\t\t\t\tfilter={ filterFactory() }\n\t\t\t\tselectRow={ selectRow }\n\t\t\t\tcellEdit={ cellEditFactory({\n\t\t\t\t\tmode: 'click',\n\t\t\t\t\tblurToSave: true,\n\t\t\t\t\tafterSaveCell\n\t\t\t\t\t})}\n\t\t\t/>\n            </CardBody>\n          </Card>\n        </Col>\n\t</Row>\n\t  <Row>\n\t  \t<Col lg={12} md={6} sm={6} xs={12}>\n          <Card>\n            <CardHeader>Update Test Script Data\n\t\t\t\t<CardImg\n\t\t\t\t\tclassName=\"card-img-right\"\n\t\t\t\t\tsrc={bg1Image}\n\t\t\t\t\tstyle={{ width: 'auto', height: 30 }}\n\t\t\t\t\tonClick={ () => this.addNewTestDataRow() }\n\t\t\t\t\t/>\n\t\t\t\t\t<CardImg\n\t\t\t\t\t\tclassName=\"card-img-right\"\n\t\t\t\t\t\tsrc={bg3Image}\n\t\t\t\t\t\tstyle={{ width: 'auto', height: 30 }}\n\t\t\t\t\t\tonClick={ () => this.deleteTestDataRow() }\n\t\t\t\t\t/>\n\t\t\t\t<Button onClick={this.SaveModuleTestData.bind(this)} color=\"primary\" name =\"saveTestData\">Save</Button>\n\t\t\t\t<Loader \n\t\t\t\ttype=\"ThreeDots\"\n\t\t\t\tcolor=\"#00BFFF\"\n\t\t\t\theight={50}\n\t\t\t\twidth={100}\n\t\t\t\ttimeout={120000} //3 secs\n\t\t\t\tvisible = {this.state.loaderTestData}\n\t\t\t\t/>\n\t\t\t</CardHeader>\n            <CardBody>\n\t\t\t<Form >\n                <FormGroup row>\n                  <Label for=\"exampleSelect\" >\n                    Environment*\n                  </Label>\n                  <Col >\n                    <Input invalid={this.state.checkTestDataEnv} type=\"select\" name=\"testdataEnv\" value={this.state.testdataEnv} onChange={this.SelectTestDataEnv.bind(this)}>\n\t\t\t\t\t<option selected=\"selected\">{this.state.testdataEnv}</option>\n\t\t\t\t\t<Options options={this.state.CommonTestData} />\n\t\t\t\t\t</Input>\n                  </Col>\n\t\t\t\t  <Label for=\"exampleSelect\" >\n                    Module*\n                  </Label>\n\t\t\t\t  <Col >\n                    <Input  invalid={this.state.checkTestDataModule} type=\"select\" name=\"testDataModule\" value={this.state.testDataModule} onChange={this.SelectTestDataModule.bind(this)}>\n\t\t\t\t\t<option selected=\"selected\">{this.state.testDataModule}</option>\n\t\t\t\t\t<GetAllModule options={allModuleName} />\n\t\t\t\t\t</Input>\n                  </Col>\n\t\t\t\t</FormGroup>\n\t\t\t\t<CardBody>\n\t\t\t\t<BootstrapTable\n\t\t\t\t\tkeyField=\"id\"\n\t\t\t\t\tdata={ this.state.testDataItemrowList }\n\t\t\t\t\tcolumns={ this.state.testDatacolumns}\n\t\t\t\t\tstriped\n\t\t\t\t\thover\n\t\t\t\t\tcondensed\n\t\t\t\t\tpagination={ paginationFactory(options) }\n\t\t\t\t\tselectRow={ selectRowforTestData }\n\t\t\t\t\tcellEdit={ cellEditFactory({\n\t\t\t\t\t\tmode: 'click',\n\t\t\t\t\t\tblurToSave: true,\n\t\t\t\t\t\t})}\n\t\t\t\t/>\n                </CardBody>\n            </Form>\n            </CardBody>\n          </Card>\n        </Col>\t\t\t\n        </Row>\n\t\t</Page>\n  );\n  }\n};\n\nexport default TestData;\n"],"sourceRoot":""}